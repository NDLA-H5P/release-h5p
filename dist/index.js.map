{"version":3,"file":"index.js","mappingssources":["../webpack/runtime/compat",".././lib/main.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst artifact_1 = require(\"@actions/artifact\");\nconst core_1 = require(\"@actions/core\");\nconst exec_1 = require(\"@actions/exec\");\nconst github_1 = require(\"@actions/github\");\nconst io_1 = require(\"@actions/io\");\nconst utils_1 = require(\"./utils\");\nconst options = {\n    depListFilePath: \"h5p-dependency-list-file\",\n    workingDirectory: \"working-directory\",\n};\nconst outputs = {\n    filePath: \"filePath\",\n    version: \"version\",\n};\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const workingDirectory = (0, core_1.getInput)(options.workingDirectory) || \"\";\n            const projectName = github_1.context.repo.repo;\n            const rootDir = path_1.default.join(workingDirectory);\n            (0, core_1.info)(`Creating directory '${projectName}' in ${rootDir}`);\n            const projectDir = path_1.default.join(rootDir, projectName);\n            yield (0, io_1.mkdirP)(projectDir);\n            yield moveAllFilesButDirectoryIntoDirectory(rootDir, projectName);\n            const fallbackDepListFilePath = \"build_info/repos\";\n            const dependencyListFilePath = (0, core_1.getInput)(options.depListFilePath) || fallbackDepListFilePath;\n            const useFallbackDepListFilePath = fallbackDepListFilePath === dependencyListFilePath;\n            const dependencyListFileExists = fs_1.default.existsSync(path_1.default.join(projectDir, dependencyListFilePath));\n            if (dependencyListFileExists) {\n                yield cloneDependencies(projectName, rootDir, dependencyListFilePath);\n            }\n            else if (useFallbackDepListFilePath) {\n                (0, core_1.info)(`Could not find an H5P dependency file.`);\n            }\n            else {\n                (0, core_1.setFailed)(`The provided H5P dependency file '${dependencyListFilePath}' could not be found.\n         If it doesn't exist, please remove \\`${options.depListFilePath}\\` from the configuration.`);\n                return;\n            }\n            yield npmBuildProjects(rootDir);\n            const library = yield getLibraryContents(rootDir, projectName);\n            if (!library) {\n                return;\n            }\n            const version = (0, utils_1.getVersionString)(library);\n            const filename = (0, utils_1.getFilename)(projectName, version);\n            yield packH5P(projectName, filename, rootDir);\n            yield archiveH5PPack(filename, rootDir);\n            (0, core_1.setOutput)(outputs.filePath, filename);\n            (0, core_1.setOutput)(outputs.version, version);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                (0, core_1.setFailed)(error.message);\n            }\n            else {\n                (0, core_1.setFailed)(error.toString());\n            }\n        }\n    });\n}\nfunction moveAllFilesButDirectoryIntoDirectory(rootDir, destinationDirectory) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const contents = yield fs_1.default.promises.readdir(rootDir);\n        const contentsExceptDestDir = contents.filter(fileOrDir => fileOrDir !== destinationDirectory);\n        (0, core_1.info)(`Contents: ${JSON.stringify(contents)}`);\n        // Move everything into the project directory.\n        // When doing this, the current project gets the\n        // same structure as the dependencies. This is\n        // crucial for the `h5p pack` command.\n        yield Promise.all(contentsExceptDestDir.map((fileOrDir) => __awaiter(this, void 0, void 0, function* () {\n            (0, core_1.info)(`Moving ${fileOrDir} into ${destinationDirectory}`);\n            yield fs_1.default.promises.rename(`${rootDir}/${fileOrDir}`, `${rootDir}/${destinationDirectory}/${fileOrDir}`);\n        })));\n    });\n}\nfunction cloneDependencies(projectName, rootDir, dependencyListFilePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        (0, core_1.info)(`Cloning dependencies from '${dependencyListFilePath}'`);\n        const dependencyFile = (yield fs_1.default.promises.readFile(`${rootDir}/${projectName}/${dependencyListFilePath}`)).toString(\"utf-8\");\n        const dependencies = [\n            ...new Set(dependencyFile\n                .split(\"\\n\")\n                .filter(dependencyName => dependencyName.trim().length > 0)\n                .filter(dependencyName => !dependencyName.startsWith(\"#\"))),\n        ];\n        (0, core_1.info)(`Dependencies: ${JSON.stringify(dependencies, null, 2)}`);\n        return Promise.all(dependencies.map((dependency) => __awaiter(this, void 0, void 0, function* () {\n            return (0, exec_1.exec)(`git clone ${dependency}`, undefined, {\n                cwd: rootDir,\n                // eslint-disable-next-line github/no-then\n            }).catch((error) => __awaiter(this, void 0, void 0, function* () {\n                let errorMessage = `Failed to clone ${dependency}: ${error}`;\n                switch (error) {\n                    case \"Error: The process '/usr/bin/git' failed with exit code 128\":\n                        errorMessage = `Failed to clone ${dependency}: The repository is probably either deleted or private. ${error}`;\n                        break;\n                }\n                (0, core_1.setFailed)(errorMessage);\n                return Promise.reject(error);\n            }));\n        })));\n    });\n}\nfunction npmBuildProject(projectPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const isNodeProject = fs_1.default.existsSync(`${projectPath}/package.json`);\n        if (isNodeProject) {\n            try {\n                (0, core_1.info)(`Installing dependencies in ${projectPath}`);\n                yield (0, exec_1.exec)(\"npm install\", undefined, { cwd: projectPath });\n                (0, core_1.info)(`Building project in ${projectPath}`);\n                yield (0, exec_1.exec)(\"npm run build --if-present\", undefined, {\n                    cwd: projectPath,\n                });\n                Promise.resolve();\n            }\n            catch (error) {\n                return Promise.reject(error);\n            }\n        }\n        else {\n            return Promise.resolve();\n        }\n    });\n}\nfunction npmBuildProjects(rootDir) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const projects = yield fs_1.default.promises.readdir(rootDir);\n        (0, core_1.info)(`Building projects: ${projects}`);\n        return Promise.all(projects.map((project) => __awaiter(this, void 0, void 0, function* () {\n            const projectPath = `${rootDir}/${project}`;\n            return npmBuildProject(projectPath);\n        })));\n    });\n}\nfunction getLibraryContents(rootDir, projectName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const projectDir = path_1.default.join(rootDir, projectName);\n        (0, core_1.info)(\"Fetching library contents\");\n        (0, core_1.info)(`Contents in root: ${yield fs_1.default.promises.readdir(rootDir)}`);\n        (0, core_1.info)(`Contents in root/project: ${yield fs_1.default.promises.readdir(projectDir)}`);\n        const libraryPath = path_1.default.join(projectDir, \"library.json\");\n        const libraryExists = fs_1.default.existsSync(libraryPath);\n        if (!libraryExists) {\n            (0, core_1.setFailed)(`Could not find \\`${libraryPath}\\`.`);\n            return null;\n        }\n        const libraryJson = (yield fs_1.default.promises.readFile(libraryPath)).toString(\"utf-8\");\n        return JSON.parse(libraryJson);\n    });\n}\nfunction packH5P(projectName, filename, rootDir) {\n    return __awaiter(this, void 0, void 0, function* () {\n        (0, core_1.info)(`Packing H5P into file '${filename}'`);\n        yield (0, exec_1.exec)(\"npm install -g h5p\");\n        yield (0, exec_1.exec)(`h5p pack -r ${projectName} ${filename}`, undefined, {\n            cwd: rootDir,\n        });\n        yield (0, exec_1.exec)(`h5p validate ${filename}`, undefined, { cwd: rootDir });\n    });\n}\nfunction archiveH5PPack(filename, rootDir) {\n    return __awaiter(this, void 0, void 0, function* () {\n        (0, core_1.info)(`Archiving H5P into file '${filename}'`);\n        const artifactClient = (0, artifact_1.create)();\n        yield artifactClient.uploadArtifact(filename, [path_1.default.join(rootDir, filename)], \".\");\n    });\n}\nrun();\n"],"names":[],"sourceRoot":""}